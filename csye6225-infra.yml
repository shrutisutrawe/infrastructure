AWSTemplateFormatVersion: "2010-09-09"
Description: CSYE 6225 Assignment 03 AWS Networking setup. This template deploys a VPC, with 3 public subnets spread across 3 Availability Zones. It deploys an internet gateway, with a default route on the public subnets.
Parameters:
  VpcCidrBlock:
    Description: "VPC CIDR Block"
    Type: String
    Default: "10.0.0.0/16"

  PublicSubnetNames:
    Description: "Subnets Name Tags"
    Type: CommaDelimitedList
    Default: "PublicSubnetA, PublicSubnetB, PublicSubnetC"

  VpcSubnetCidrBlocks:
    Description: "Three Subnet CIDR blocks"
    Type: CommaDelimitedList
    Default: "10.0.10.0/24, 10.0.11.0/24, 10.0.12.0/24, 10.0.13.0/24, 10.0.14.0/24, 10.0.15.0/24"

  VpcSubnetAvailabilityZones:
    Description: "Three Subnet Availability Zones"
    Type: CommaDelimitedList
    Default: "us-west-2a, us-west-2b, us-west-2c"

  PublicRouteDestinationCidrBlock:
    Description: "Public Route CIDR Block"
    Type: String
    Default: "0.0.0.0/0"

  PublicRouteTableName:
    Description: "Name Tag for Public Route Table"
    Type: String
    Default: "PublicRT"

  InternetGatewayName:
    Description: "Name Tag for Internet Gateway"
    Type: String
    Default: "InternetGateway"

  PrivateSubnetNames:
    Description: "Name Tags for Subnets"
    Type: CommaDelimitedList
    Default: "PrivateSubnetA, PrivateSubnetB, PrivateSubnetC"

  PrivateRouteTableName:
    Description: "Name Tag for Private RT"
    Type: String
    Default: "PrivateRT"

  EC2Instance:
    Type: String
    Default: t2.micro
    AllowedValues: [ t2.micro ]
    Description: "EC2Instance AMI"


  CodeDeployS3Bucket:
    Description: "CodeDeploy S3 Bucket"
    Type: String
    Default: code-deploy-s3-bucket-csye-6225

  AMI:
    Type: String
    Default: "ami-017fecd1353bcc96e"
    Description: "The AMI to use"

#  S3BucketName:
#    Type: String
#    Default: "csye6225bucketshruti"
#    Description: "S3Bucket Name"

  DBName:
    Description: "RDS DB Name"
    Type: String
    Default: "csye6225"

  DBUserName:
    Description: "RDS Master Username"
    Type: String
    Default: "csye6225"

  DBPassword:
    Description: "RDS Master Password"
    Type: String
    Default: "csye6225pwd"

  DBSecurityGroupName:
    Description: "Name Tag for DB Security Group"
    Type: String
    Default: "database"

  HostedZone:
    Type: String
    Default: "devshrutisutrawe.me."
    Description: "The route53 HostedZoneName"

  Subdomain:
    Description: "Environment Name"
    Type: String
    Default: "dev"
    AllowedValues:
      - dev
      - demo

  UserAccountVerificationSNSTopicName:
    Description: "SNS topic name for new account email verification"
    Type: "String"
    Default: "UserAccountVerificationSNSTopic"

  SNSTopicName:
    Type: String
    Description: Topic Name
    Default: my-topic

  LambdaName:
    Type: String
    Default: "LambdaName"

  ModuleName:
      Type: String
      Default: "python"

  LambdaFunctionName:
    Description: "Email sending lambda function"
    Type: "String"
    Default: "LambdaFunction"

  LambdaFunctionS3BucketName:
    Description: "bucket Name"
    Type: String
    Default: "csye6225-shruti"

  SSLCertificateId:
    Type: String
    Default: "13579a6c-27c8-4f60-8dc9-f21e1e483224"
    Description: "SSL Certificate Id"

Resources:
  myVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidrBlock
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      InstanceTenancy: 'default'
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn:
      - myVPC
    Properties:
      Tags:
        - Key: Name
          Value: !Ref InternetGatewayName

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref myVPC

  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: !Select [ 0, !Ref VpcSubnetCidrBlocks ]
      AvailabilityZone: !Select
        - 0
        - !GetAZs
          Ref: 'AWS::Region'
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Select [ 0, !Ref PublicSubnetNames ]
        - Key: VPC Name
          Value: !Ref AWS::StackName

  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: !Select [ 1, !Ref VpcSubnetCidrBlocks ]
      AvailabilityZone: !Select
        - 1
        - !GetAZs
          Ref: 'AWS::Region'
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Select [ 1, !Ref PublicSubnetNames ]
        - Key: VPC Name
          Value: !Ref AWS::StackName

  PublicSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: !Select [ 2, !Ref VpcSubnetCidrBlocks ]
      AvailabilityZone: !Select
        - 2
        - !GetAZs
          Ref: 'AWS::Region'
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Select [ 2, !Ref PublicSubnetNames ]
        - Key: VPC Name
          Value: !Ref AWS::StackName

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: myVPC
      Tags:
        - Key: Name
          Value: !Ref PublicRouteTableName
        - Key: VPC Name
          Value: !Ref AWS::StackName

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway

  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnetA
      RouteTableId:
        Ref: PublicRouteTable

  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnetB
      RouteTableId:
        Ref: PublicRouteTable

  PublicSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnetC
      RouteTableId:
        Ref: PublicRouteTable

  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: !Select [ 3, !Ref VpcSubnetCidrBlocks ]
      AvailabilityZone: !Select
        - 0
        - !GetAZs
          Ref: 'AWS::Region'
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Select [ 0, !Ref PrivateSubnetNames ]
        - Key: VPC Name
          Value: !Ref AWS::StackName

  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: !Select [ 4, !Ref VpcSubnetCidrBlocks ]
      AvailabilityZone: !Select
        - 1
        - !GetAZs
          Ref: 'AWS::Region'
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Select [ 1, !Ref PrivateSubnetNames ]
        - Key: VPC Name
          Value: !Ref AWS::StackName

  PrivateSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: !Select [ 5, !Ref VpcSubnetCidrBlocks ]
      AvailabilityZone: !Select
        - 2
        - !GetAZs
          Ref: 'AWS::Region'
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Select [ 2, !Ref PrivateSubnetNames ]
        - Key: VPC Name
          Value: !Ref AWS::StackName

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: myVPC
      Tags:
        - Key: Name
          Value: !Ref PrivateRouteTableName
        - Key: VPC Name
          Value: !Ref AWS::StackName

  PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PrivateSubnetA
      RouteTableId:
        Ref: PrivateRouteTable

  PrivateSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PrivateSubnetB
      RouteTableId:
        Ref: PrivateRouteTable

  PrivateSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PrivateSubnetC
      RouteTableId:
        Ref: PrivateRouteTable

  EC2InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "ApplicationSecurityGroup"
      GroupDescription: "Application Security Group"
      VpcId: !Ref myVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
#          CidrIp: 0.0.0.0/0
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup

  # Create RDS Parameter Group for MySQL
  RDSDBParameterGroup:
    Type: 'AWS::RDS::DBParameterGroup'
    Properties:
      Description: CloudFormation Sample MySQL Parameter Group
      Family: mysql8.0
#      Parameters:
#        sql_mode: IGNORE_SPACE
#        max_allowed_packet: 1024
  #        innodb_buffer_pool_size: '{DBInstanceClassMemory*3/4}'

  # Create RDS Subnet Group in the VPC
  RDSSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: !Sub RDS Subnet Group
      SubnetIds:
        - !Ref PrivateSubnetA
        - !Ref PrivateSubnetB
        - !Ref PrivateSubnetC

  # Create Security Group for RDS with inbound rules from EC2 Instance Security Group
  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn: EC2InstanceSecurityGroup
    Properties:
      GroupDescription: !Sub RDS Security Group
      VpcId: !Ref myVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref EC2InstanceSecurityGroup

  # Create RDS Instance with MySQL 8.0 and RDS Subnet Group and Parameter Group
  RDSInstance:
    Type: AWS::RDS::DBInstance
    DependsOn:
      - RDSSecurityGroup
      - RDSSubnetGroup
      - RDSDBParameterGroup
      - RdsKmsKey
    Properties:
      DBInstanceClass: db.t3.micro
      DBName: !Ref DBName
      Engine: mysql
      EngineVersion: 8.0.27
      AllocatedStorage: 20
      MasterUsername: !Ref DBUserName
      MasterUserPassword: !Ref DBPassword
      DBSubnetGroupName: !Ref RDSSubnetGroup
      VPCSecurityGroups:
        - !Ref RDSSecurityGroup
      DBParameterGroupName: !Ref RDSDBParameterGroup
      PubliclyAccessible: false
      StorageEncrypted: true
      KmsKeyId:
        Fn::GetAtt: [RdsKmsKey , Arn]

  # Create a KMS Key
  RdsKmsKey:
    Type: AWS::KMS::Key
    Properties:
      Description: !Sub KMS Key for RDS
      KeyPolicy:
        Version: "2012-10-17"
        Id: "kms-key-for-rds"
        Statement:
          - Sid: "Allow IAM User permission for RDS Instance"
            Effect: Allow
            Principal:
              AWS: !Join
                - ''
                - - 'arn:aws:iam::'
                  - !Ref 'AWS::AccountId'
                  - ':root'
            Action: "kms:*"
            Resource: "*"
          - Sid: "Add service role"
            Effect: Allow
            Principal:
              AWS: !Join
                - ''
                - - 'arn:aws:iam::'
                  - !Ref 'AWS::AccountId'
                  - ':role/aws-service-role/rds.amazonaws.com/AWSServiceRoleForRDS'
            Action: "kms:*"
            Resource: "*"

  # S3 bucket with encryption and lifecycle
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        !Join [
           "",
         [
           "csye6225bucket-",
           !Select [ 0, !Split [ -, !Select [ 2, !Split [ /, !Ref AWS::StackId ] ] ] ],
           ".",
           !Ref Subdomain,
         ],
        ]
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        IgnorePublicAcls: true
        BlockPublicPolicy: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: SA to IA
            Status: Enabled
            Transitions:
              - StorageClass: STANDARD_IA
                TransitionInDays: 30
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  # Create IAM Role for EC2 Instance with S3 Bucket Policy
  Ec2InstanceIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: WebAppS3
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:ListBucket
                Resource:
                  - !Join [ "", [ "arn:aws:s3:::", !Ref S3Bucket ] ]
                  - !Join [ "", [ "arn:aws:s3:::", !Ref S3Bucket, "/*" ] ]
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy"
        - "arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess"
        - "arn:aws:iam::aws:policy/AmazonSNSFullAccess"

  # Create Iam Instance Profile
  Ec2InstanceIamProfile:
    Type: AWS::IAM::InstanceProfile
    DependsOn: Ec2InstanceIamRole
    Properties:
      InstanceProfileName: !Sub '${AWS::StackName}-LaunchTemplateIAMInstanceProfile'
      Path: /
      Roles:
        - !Ref Ec2InstanceIamRole

  # Create Target Group for Load Balancer
  LoadBalancerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub '${AWS::StackName}-TargetGroup'
      Port: 3000
      Protocol: HTTP
      VpcId: !Ref myVPC
      HealthCheckIntervalSeconds: 90
      HealthCheckPath: '/healthz'
      HealthCheckPort: '3000'
      HealthCheckProtocol: 'HTTP'
      HealthCheckTimeoutSeconds: 60
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      TargetType: instance
      IpAddressType: ipv4
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '20'
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-TargetGroup'

  # Create Load Balancer Security Group
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Load Balancer Security Group
      VpcId: !Ref myVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  # Create Load Balancer
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn:
      - EC2AutoScalingGroup
      - LoadBalancerSecurityGroup
    Properties:
      Name: !Sub '${AWS::StackName}-LoadBalancer'
      Scheme: internet-facing
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Subnets:
        - !Ref PublicSubnetA
        - !Ref PublicSubnetB
        - !Ref PublicSubnetC
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'
      IpAddressType: ipv4
      Type: application
      Tags:
        - Key: Application
          Value: WebApp
        - Key: Name
          Value: !Sub '${AWS::StackName}-LoadBalancer'

  # Create Listener for Load Balancer
  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Join [ "", [ "arn:aws:acm:", !Ref AWS::Region, ":", !Ref AWS::AccountId, ":certificate/", !Ref SSLCertificateId ] ]
#        - CertificateArn: 'arn:aws:acm:us-west-2:097171053993:certificate/13579a6c-27c8-4f60-8dc9-f21e1e483224'
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref LoadBalancerTargetGroup


  LambdaFunction:
    Type: AWS::Lambda::Function
    Description: Send email to SNS
    Properties:
      FunctionName: !Ref LambdaFunctionName
      Role:
        Fn::Join:
          - ''
          - - 'arn:aws:iam::'
            - !Ref AWS::AccountId
            - ":role/"
            - !Ref LambdaFunctionRole
      Runtime: python3.9
      Handler: lambda_function.lambda_handler
      Environment:
        Variables:
          SENDGRID_API_KEY: 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
      Code:
        S3Bucket: !Ref LambdaFunctionS3BucketName
        S3Key: serverless.zip

  # Create EC2 Launch Template
  EC2LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    DependsOn:
      - RDSInstance
      - S3Bucket
      - Ec2InstanceIamProfile
    Properties:
      LaunchTemplateName: !Sub 'asg_launch_config'
      LaunchTemplateData:
        ImageId: !Ref AMI
        InstanceType: t2.micro
        KeyName: "aws-us-west-2-key"
        IamInstanceProfile:
          Arn: !Sub 'arn:aws:iam::${AWS::AccountId}:instance-profile/${AWS::StackName}-LaunchTemplateIAMInstanceProfile'
        BlockDeviceMappings:
          - DeviceName: "/dev/xvda"
            Ebs:
              VolumeType: "gp2"
              DeleteOnTermination: true
              VolumeSize: 20
              Encrypted: true
              KmsKeyId: !Ref EBSKmsKey
        SecurityGroupIds:
          - !Ref EC2InstanceSecurityGroup
        UserData:
          Fn::Base64:
            !Sub |
            #!/bin/bash
            DB_HOST=${RDSInstance.Endpoint.Address}
            AWS_BUCKET_NAME=${S3Bucket}
            DB_USERNAME=${DBUserName}
            DB_PASSWORD=${DBPassword}
            DB_NAME=${DBName}
            ACCOUNT_ID=${AWS::AccountId}
            AWSREGION=${AWS::Region}
            HOSTED_ZONE=${Subdomain}.${HostedZone}

            sudo apt update -y
            {
              echo "export AWS_RDS_DB_ENDPOINT=$DB_HOST"
              echo "export AWS_RDS_DB_PORT=3306"
              echo "export AWS_RDS_DB_MASTER_USERNAME=$DB_USERNAME"
              echo "export AWS_RDS_DB_MASTER_PASSWORD=$DB_PASSWORD"
              echo "export AWS_RDS_DB_NAME=$DB_NAME"
              echo "export PORT=3000"
              echo "export AWS_S3_BUCKET_NAME=$AWS_BUCKET_NAME"
            } >>/etc/profile

            {
              echo "AWS_RDS_DB_ENDPOINT=$DB_HOST"
              echo "AWS_RDS_DB_PORT=3306"
              echo "AWS_RDS_DB_MASTER_USERNAME=$DB_USERNAME"
              echo "AWS_RDS_DB_MASTER_PASSWORD=$DB_PASSWORD"
              echo "AWS_RDS_DB_NAME=$DB_NAME"
              echo "PORT=3000"
              echo "AWS_S3_BUCKET_NAME=$AWS_BUCKET_NAME"
              echo "AWS_USER_EMAIL_VERIFICATION_SNS_TOPIC_NAME=${UserAccountVerificationSNSTopicName}"
              echo "AWS_ACCOUNT_ID=$ACCOUNT_ID"
              echo "AWS_HOSTED_ZONE_DNS=$HOSTED_ZONE"
              echo "AWS_REGION=$AWSREGION"
            } >>/opt/webapps/custom.properties
            sudo systemctl stop myapp.service
            sudo systemctl start myapp.service
            sudo systemctl enable myapp.service

  EBSKmsKey:
    Type: AWS::KMS::Key
    Properties:
      Description: !Sub KMS Key for EBS
      KeyPolicy:
        Version: "2012-10-17"
        Id: "kms-key-for-ebs"
        Statement:
          - Sid: "Allow IAM User permission for EBS"
            Effect: Allow
            Principal:
              AWS: !Join
                - ''
                - - 'arn:aws:iam::'
                  - !Ref 'AWS::AccountId'
                  - ':root'
            Action: "kms:*"
            Resource: "*"
          - Sid: "Add service role"
            Effect: Allow
            Principal:
              AWS: !Join
                - ''
                - - 'arn:aws:iam::'
                  - !Ref 'AWS::AccountId'
                  - ':role/aws-service-role/autoscaling.amazonaws.com/AWSServiceRoleForAutoScaling'
            Action: "kms:*"
            Resource: "*"

  # Create Auto Scaling Group with Launch Template
  EC2AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn:
      - EC2LaunchTemplate
      - LoadBalancerTargetGroup
    Properties:
      AutoScalingGroupName: !Sub '${AWS::StackName}-auto-scaling-group'
      AvailabilityZones:
        - us-west-2a
        - us-west-2b
        - us-west-2c
      HealthCheckGracePeriod: 90
      HealthCheckType: EC2
      LaunchTemplate:
        LaunchTemplateId: !Ref EC2LaunchTemplate
        Version: !GetAtt EC2LaunchTemplate.LatestVersionNumber
      MinSize: '1'
      MaxSize: '3'
      DesiredCapacity: '1'
      VPCZoneIdentifier:
        - !Ref PublicSubnetA
        - !Ref PublicSubnetB
        - !Ref PublicSubnetC
      Cooldown: '60'

      Tags:
        - Key: Application
          Value: WebApp
          PropagateAtLaunch: "true"
        - Key: Name
          Value: !Sub '${AWS::StackName}-auto-scaling-group'
          PropagateAtLaunch: "true"
      TargetGroupARNs:
        - !Ref LoadBalancerTargetGroup

  asgCPUPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    DependsOn:
      - EC2AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Ref EC2AutoScalingGroup
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: 90.0

  # Create Auto Scaling Policy for Scaling Out
  EC2AutoScalingPolicyForScalingOut:
    Type: AWS::AutoScaling::ScalingPolicy
    DependsOn:
      - EC2AutoScalingGroup
    Properties:
      AdjustmentType: ChangeInCapacity
      ScalingAdjustment: '1'
      AutoScalingGroupName: !Ref EC2AutoScalingGroup

  AvgCPUUp:
    Type: AWS::CloudWatch::Alarm
    DependsOn:
      - EC2AutoScalingGroup
    Properties:
      AlarmDescription: !Sub '${AWS::StackName}-AVGCPUUP'
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 2
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Period: 60
      Statistic: Average
      Threshold: 5.0
      AlarmActions:
        - !Ref EC2AutoScalingPolicyForScalingOut
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref EC2AutoScalingGroup

  EC2AutoScalingPolicyForScalingIn:
    Type: AWS::AutoScaling::ScalingPolicy
    DependsOn:
      - EC2AutoScalingGroup
    Properties:
      AdjustmentType: ChangeInCapacity
      ScalingAdjustment: '-1'
      AutoScalingGroupName: !Ref EC2AutoScalingGroup

  AvgCPUDown:
    Type: AWS::CloudWatch::Alarm
    DependsOn:
      - EC2AutoScalingGroup
    Properties:
      AlarmDescription: !Sub '${AWS::StackName}-AVGCPUDOWN'
      ComparisonOperator: LessThanThreshold
      EvaluationPeriods: 2
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Period: 60
      Statistic: Average
      Threshold: 3.0
      AlarmActions:
        - !Ref EC2AutoScalingPolicyForScalingIn
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref EC2AutoScalingGroup

  LambdaFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: "LambdaFunctionRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  DynamodbTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "email"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "email"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      TableName: UserAccountVerificationTokenTable
      TimeToLiveSpecification:
        AttributeName: token_expiry_time_epoch
        Enabled: true
      Tags:
        - Key: key
          Value: value

  DynamoDBSericeAccessPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: DynamoDBSericeAccessPolicy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - 'dynamodb:Get*'
              - 'dynamodb:PutItem'
              - 'dynamodb:DescribeTable'
              - 'dynamodb:Query'
              - 'dynamodb:Scan'
              - 'dynamodb:Delete*'
              - 'dynamodb:CreateTable'
              - 'dynamodb:Update*'
              - 'dynamodb:BatchWrite*'
              - 'dynamodb:DescribeStream'
            Resource:
              - !Join [ "",[ "arn:aws:dynamodb:us-west-2:",!Ref "AWS::AccountId", ":table/UserAccountVerificationTokenTable", ], ]
      Roles:
        - !Ref Ec2InstanceIamRole

  # Create SNS Topic
  SNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Ref UserAccountVerificationSNSTopicName
      DisplayName: !Ref UserAccountVerificationSNSTopicName
      Subscription:
        - Endpoint: !GetAtt LambdaFunction.Arn
          Protocol: "lambda"


  # Create SNS Topic Policy
  SNSTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Version: '2008-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: "*"
            Action:
              - SNS:Publish
              - SNS:Subscribe
              - SNS:ListSubscriptionsByTopic
              - SNS:GetTopicAttributes
              - SNS:SetTopicAttributes
              - SNS:AddPermission
              - SNS:RemovePermission
              - SNS:DeleteTopic
            Resource: !Ref SNSTopic
            Condition:
              StringEquals:
                AWS:SourceOwner: !Ref AWS::AccountId
      Topics:
        - !Ref SNSTopic

  SNSServiceAccessPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: SNSSericeAccessPolicy
      PolicyDocument:
        Version: '2008-10-17'
        Id: __default_policy_ID
        Statement:
          - Effect: Allow
            Action: 'sns:Publish'
            Resource:
              - !Ref SNSTopic
      Roles:
        - !Ref Ec2InstanceIamRole

  # Create Lambda Function Permission for SNS Topic
  SNSTopicLambdaPermission:
    DependsOn: LambdaFunction
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LambdaFunction
      Action: "lambda:InvokeFunction"
      Principal: "sns.amazonaws.com"
      SourceArn: !Ref SNSTopic

  myDNSRecord:
    Type: AWS::Route53::RecordSetGroup
    DependsOn:
      - LoadBalancer
    Properties:
      HostedZoneName: !Join [ "", [ !Ref Subdomain, ".devshrutisutrawe.me." ] ]
      Comment: DNS name for my instance.
      RecordSets:
        - Name: !Join [ '', [ !Ref Subdomain, ".devshrutisutrawe.me." ] ]
          Type: A
          AliasTarget:
             DNSName: !GetAtt LoadBalancer.DNSName
             HostedZoneId: !GetAtt LoadBalancer.CanonicalHostedZoneID
Outputs:
  VpcId:
    Description: The VPC ID
    Value: !Ref myVPC
